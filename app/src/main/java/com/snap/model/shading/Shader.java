package com.snap.model.shading;

import android.opengl.GLES20;
import android.support.annotation.RawRes;

import com.snap.model.exception.GlException;
import com.snap.model.exception.GlLibException;

public class Shader {

    private static final int NOT_DEFINED_HANDLE = 0;

    private final String mShaderSourceCode;
    private final ShaderType mShaderType;
    /**
     * Reference to the created and compiled shader. Generated by OpenGL.
     */
    private int mShaderHandle;

    /**
     * Returns compiled shader's handle.
     */
    public static int createAndCompileShader(ShaderType shaderType, String sourceCode) throws GlException {
        final int shaderId = GLES20.glCreateShader(shaderType.asInt());
        GLES20.glShaderSource(shaderId, sourceCode);
        GLES20.glCompileShader(shaderId);

        int[] compileStatus = new int[1];
        GLES20.glGetShaderiv(shaderId, GLES20.GL_COMPILE_STATUS, compileStatus, 0);
        if (compileStatus[0] == 0) {
            final String errorMessage = "Failed to compile shader: " + GLES20.glGetShaderInfoLog(shaderId);
            GLES20.glDeleteShader(shaderId);
            throw new GlException(errorMessage);
        }
        return shaderId;
    }

    public static Shader fromSourceCode(ShaderType shaderType, String shaderSourceCode) {
        return new Shader(shaderType, shaderSourceCode);
    }

    public static Shader fromRawResId(ShaderType shaderType, @RawRes int rawResId) {
        throw new UnsupportedOperationException("Not implemented yet.");
    }

    private Shader(ShaderType shaderType, String shaderSourceCode) {
        mShaderType = shaderType;
        mShaderSourceCode = shaderSourceCode;
    }

    public boolean isSetup() {
        return mShaderHandle != NOT_DEFINED_HANDLE;
    }

    public int getShaderHandle() {
        return mShaderHandle;
    }

    public void setup() throws GlLibException {
        if (isSetup()) {
            throw new GlLibException("Shader already setup and available by [" + mShaderHandle + "] handle");
        }
        mShaderHandle = createAndCompileShader(mShaderType, mShaderSourceCode);
    }

    public void release() {
        if (isSetup()) {
            GLES20.glDeleteShader(mShaderHandle);
            mShaderHandle = NOT_DEFINED_HANDLE;
        }
    }

    public enum ShaderType {

        VERTEX(GLES20.GL_VERTEX_SHADER),
        FRAGMENT(GLES20.GL_FRAGMENT_SHADER);

        private final int shaderTypeAsInt;

        ShaderType(int shaderTypeAsInt) {
            this.shaderTypeAsInt = shaderTypeAsInt;
        }

        public int asInt() {
            return shaderTypeAsInt;
        }
    }
}
