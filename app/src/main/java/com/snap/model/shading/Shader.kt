package com.snap.model.shading

import android.opengl.GLES20
import android.support.annotation.RawRes

import com.snap.model.exception.GlException
import com.snap.model.exception.GlLibException


private const val notDefinedHandle = 0

class Shader private constructor(val type: ShaderType, private val shaderSourceCode: String) {

    val isSetup: Boolean
        get() {
            return shaderHandle != notDefinedHandle
        }

    /**
     * Reference to the created and compiled shader. Generated by OpenGL.
     */
    var shaderHandle: Int = notDefinedHandle
        get() {
//            if (field == notDefinedHandle) {
//                throw IllegalStateException("You have to createAndCompile shader before getting its handle")
//            }
            return field
        }
        private set(value) {
            field = value
        }

    fun createAndCompile() {
        if (isSetup) {
            throw GlLibException("Shader already createAndCompile and available by [$shaderHandle] handle")
        }
        shaderHandle = createAndCompileShader(type, shaderSourceCode)
    }

    /**
     * Returns compiled shader's handle.
     */
    private fun createAndCompileShader(shaderType: ShaderType, sourceCode: String): Int {
        val shaderId = GLES20.glCreateShader(shaderType.asInt())
        GLES20.glShaderSource(shaderId, sourceCode)
        GLES20.glCompileShader(shaderId)

        val compileStatus = IntArray(1)
        GLES20.glGetShaderiv(shaderId, GLES20.GL_COMPILE_STATUS, compileStatus, 0)
        if (compileStatus[0] == 0) {
            val errorMessage = "Failed to compile shader: " + GLES20.glGetShaderInfoLog(shaderId)
            GLES20.glDeleteShader(shaderId)
            throw GlException(errorMessage)
        }
        return shaderId
    }

    private fun checkIsSetup() {
        if (!isSetup) {
            throw IllegalStateException("You have to createAndCompile shader before calling method.")
        }
    }

    fun release() {
        if (isSetup) {
            GLES20.glDeleteShader(shaderHandle)
            shaderHandle = notDefinedHandle
        }
    }

    companion object {

        fun fromSourceCode(shaderType: ShaderType, shaderSourceCode: String): Shader {
            return Shader(shaderType, shaderSourceCode)
        }

        fun fromRawResId(shaderType: ShaderType, @RawRes rawResId: Int): Shader {
            throw UnsupportedOperationException("Not implemented yet.")
        }
    }
}

enum class ShaderType(private val shaderTypeAsInt: Int) {

    VERTEX(GLES20.GL_VERTEX_SHADER),
    FRAGMENT(GLES20.GL_FRAGMENT_SHADER);

    fun asInt(): Int {
        return shaderTypeAsInt
    }
}
